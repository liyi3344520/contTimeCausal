{
    "contents" : "% Generated by roxygen2 (4.1.1): do not edit by hand\n% Please edit documentation in R/ctSFTM.R\n\\name{ctSFTM}\n\\alias{ctSFTM}\n\\title{Continuous-time Structural Failure Time Model (ctSFTM)}\n\\usage{\nctSFTM(V, deltaV, U, deltaD, Lti, Ltd4Vtime, Ltd4Utime)\n}\n\\arguments{\n\\item{V}{the time to treatment discontinuation or failure or censoring (n x 1)}\n\n\\item{deltaV}{the binary indicator of treatment discontinuation at time V (n x 1)}\n\n\\item{U}{the time to failure or censoring (n x 1)}\n\n\\item{deltaD}{the binary indicator of failure at time U (n x 1)}\n\n\\item{Lti}{1-dimensional baseline covariate (n x 1)}\n\n\\item{Ltd4Vtime}{a matrix  consisting of the time-dependent covariate (n x ltimeV)\n\nltimeV is the length of uniquely observed treatment discontinuation times (called V times)\n\none row represents one individual's time-dependent covariates\n\ncolumns represent ordered V times}\n\n\\item{Ltd4Utime}{a matrix  consisting of the time-dependent covariate (n x ltimeU)\n\nltimeU is the length of uniquely observed failure times (called U times)\n\none row represents one individual's time-dependent covariates\n\ncolumns represent ordered U times}\n}\n\\value{\n\\code{est}: estimate of the SFTM parameter\n}\n\\description{\nThe function estimates the effect of treatment effect for a survival outcome under a SFTM\nwith time-varying treatment and confounding in the presence of dependent censoring.\n}\n\\details{\nThe SFTM assumes that the potential failure time \\code{U} had the individual never received treatment and the observed failure time \\code{T} follow\n\\deqn{U ~ \\int_0^T e^{\\psi A_u}d u, }\nwhere \\code{~} means \"has the same distribution as\", and \\eqn{A_u} is the treatment indicator at time \\eqn{u}.\nWe assume that the individual continuously received treatment until time \\eqn{V}.\nThe observed failure time can be censored assuming the censoring time is independent of the failure time given the treatment and covariate history (the so-called ignorable censoring).\nThe current function provides a template to handle one-dimensional baseline covariate and one-dimensional time-dependent covariate;\nextension to handling multiple baseline  and  time-dependent covariates is possible.\nVariance estimate should be implemented by delete-one-group jackknifing and recalling ctSFTM.\n}\n\\examples{\nlibrary(\"survival\")\nlibrary(\"MASS\")\nlibrary(\"zoo\")\n\n set.seed(seed=11)\n n=1000\n\n ## generate time-indept covariate\n\n Lti<-rbinom(n,1,0.55)\n Lti<-Lti-mean(Lti)\n\n ## generate time-dept covariate\n\n Sigma<-matrix(0,3,3)\n for(i in 1:3){\n   for(j in 1:3){\n     Sigma[i,j]<-0.7^(abs(i-j))\n   }\n }\n\n ## Vtd represents the values of covariate at times t1=0, t2=5, and t3=10.\n ## We assume that the time-dependent variable remains constant between measurements.\n\n Vtdtemp<-mvrnorm(n = n, rep(0,3), Sigma)\n Vtd<-Vtdtemp\n t<-c(0,5,10,100)\n colnames(Vtd)<-paste(\"t\",1:3,sep=\"\")\n\n ## generate time-to-events\n ## D =time to death if never stop treatment (time-indep Cox)\n ## V =time to discontinuity (time-dep Cox)\n ## avoiding the same time points for V and U\n\n ## generate D according to an exp distribution\n\n D<-rexp(n=n,0.2)\n\n Vtd<-Vtdtemp+ matrix((D-20)/5,n,3,byrow=FALSE)\n colnames(Vtd)<-paste(\"t\",1:3,sep=\"\")\n\n ## generate V according to a tme-dept Cox using Bender et al (2005)\n\n lambdaV <- 0.15;  betaV <- c(0.15,0.15)\n\n v  <- runif(n=n)\n temp1 <- (- log(1-v) / (lambdaV * exp(cbind(Lti,Vtd[,1]) \\%*\\% betaV)))\n v  <- runif(n=n)\n temp2 <- (- log(1-v) / (lambdaV * exp(cbind(Lti,Vtd[,2]) \\%*\\% betaV)))\n v  <- runif(n=n)\n temp3 <- (- log(1-v) / (lambdaV * exp(cbind(Lti,Vtd[,3]) \\%*\\% betaV)))\n id1<-(temp1 < t[2])\n id2<-(temp2 < (t[3]-t[2]))\n id3<-(temp3 < (t[4]-t[3]))\n V2<- id1*temp1 + (1-id1)*id2*(temp2+t[2]) + (1-id1)*(1-id2)*(temp3+t[3])\n\n ## generate Tv according to a SFTM\n psi<- 0\n true<-exp(psi)\n\n id1<-D<=V2\n T.temp11<-D*exp(-psi[1])\n\n id11<-T.temp11<=V2\n id12<-T.temp11>V2\n T.temp12<-D + V2-exp(psi[1])*V2\n\n id2<-D>V2\n T.temp2<-D + V2-exp(psi[1])*V2\n\n Tv<-id11*T.temp11+id12*T.temp12\n\n ## generate censoring according to time-dept Cox\n ## nu=time to censoring\n\n lambdaC <- 0.025; betaC <- c(0.15,0.15)\n\n v  <- runif(n=n)\n temp3 <- (- log(1-v) / (lambdaC * exp(cbind(Lti,1) \\%*\\% betaC)))\n v  <- runif(n=n)\n temp4 <- (- log(1-v) / (lambdaC * exp(cbind(Lti,0) \\%*\\% betaC)))\n id3<-(temp3 < V2)\n nu<- id3*temp3 + (1-id3)*(V2+temp4)\n\n check1<-sort( c(V2, apply(cbind(Tv,nu),1,min)))\n check2<-c(check1,9999)-c(0,check1)\n\n if(min(check2)<10^-6){\n   print(\"Please re-generate the data in order to avoid the same time points for V and U\")\n }\n\n U<-apply( cbind(Tv,nu) ,1,min)\n deltaD <- ( U<nu )\n deltaV<-(V2<U)&(V2<nu)\n V<-apply(cbind(V2,U,nu),1,min)\n\n ## time-dependent covariate\n ## Ltd4Vtime is a n x ltimeV matrix consisting of the time-dependent cov\n ## each row represents each indiviudal\n ## columns represent ordered V times (the realized treatment discontinuation times)\n\n data1<-list(time=V,status=deltaV)\n fit<-coxph(Surv(time, status) ~ . , data1)\n ss<-survfit(fit)\n obsV.times<-ss$time\n ltime<-length(obsV.times)\n\n id1<- (obsV.times < t[2])\n id2<-((obsV.times < t[3])&(obsV.times > t[2]))\n id3<- (obsV.times > t[3])\n Ltd4Vtime<-matrix(NA,nrow=n,ncol=ltime)\n Ltd4Vtime[,which(id1==1)]<-Vtd[,1]\n Ltd4Vtime[,which(id2==1)]<-Vtd[,2]\n Ltd4Vtime[,which(id3==1)]<-Vtd[,3]\n\n ## Ltd4Utime is a n x ltimeU matrix consisting of the time-dependent cov\n ## each row represents each indiviudal\n ## columns represent ordered U times (the realized event times)\n\n data2<-list(time=U,status=1-deltaD)\n fit<-coxph(Surv(time, status) ~ . , data2)\n ss<-survfit(fit)\n obsU.times<-ss$time[ss$n.event==1]\n ltimeU<-length(obsU.times)\n id1<- (obsU.times < t[2])\n id2<-((obsU.times < t[3])&(obsU.times > t[2]))\n id3<- (obsU.times > t[3])\n Ltd4Utime<-matrix(NA,nrow=n,ncol=ltimeU)\n Ltd4Utime[,which(id1==1)]<-Vtd[,1]\n Ltd4Utime[,which(id2==1)]<-Vtd[,2]\n Ltd4Utime[,which(id3==1)]<-Vtd[,3]\n\n true\n ctSFTM(V,deltaV,U,deltaD,Lti,Ltd4Vtime,Ltd4Utime)$est\n}\n\\references{\nYang, S., K. Pieper, and F. Cools. (2019) Semiparametric estimation of structural failure time model in continuous-time processes.\n  \\url{https://arxiv.org/abs/1808.06408}\n}\n\\seealso{\n\\code{\\link{ctCoxMSM}}\n}\n\n",
    "created" : 1550263572494.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "801108426",
    "id" : "8F1EF0D6",
    "lastKnownWriteTime" : 1550266356,
    "path" : "~/contTimeCausal/man/ctSFTM.Rd",
    "project_path" : "man/ctSFTM.Rd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_doc"
}